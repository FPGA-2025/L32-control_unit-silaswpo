$date
	Wed Jul 23 17:08:10 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var wire 1 ! reg_write $end
$var wire 1 " pc_write_cond $end
$var wire 1 # pc_write $end
$var wire 1 $ pc_source $end
$var wire 1 % memory_write $end
$var wire 1 & memory_to_reg $end
$var wire 1 ' memory_read $end
$var wire 1 ( lorD $end
$var wire 1 ) is_immediate $end
$var wire 1 * ir_write $end
$var wire 2 + aluop [1:0] $end
$var wire 2 , alu_src_b [1:0] $end
$var wire 2 - alu_src_a [1:0] $end
$var parameter 7 . AUIPCI $end
$var parameter 7 / BRANCHI $end
$var parameter 7 0 CSR $end
$var parameter 7 1 ITYPE $end
$var parameter 7 2 JALI $end
$var parameter 7 3 JALRI $end
$var parameter 7 4 LUII $end
$var parameter 7 5 LW $end
$var parameter 7 6 RTYPE $end
$var parameter 7 7 SW $end
$var reg 1 8 clk $end
$var reg 2 9 expected_alu_src_a [1:0] $end
$var reg 2 : expected_alu_src_b [1:0] $end
$var reg 2 ; expected_aluop [1:0] $end
$var reg 1 < expected_ir_write $end
$var reg 1 = expected_is_immediate $end
$var reg 1 > expected_lorD $end
$var reg 1 ? expected_memory_read $end
$var reg 1 @ expected_memory_to_reg $end
$var reg 1 A expected_memory_write $end
$var reg 1 B expected_pc_source $end
$var reg 1 C expected_pc_write $end
$var reg 1 D expected_pc_write_cond $end
$var reg 1 E expected_reg_write $end
$var reg 7 F instruction_opcode [6:0] $end
$var reg 1 G rst_n $end
$var integer 32 H i [31:0] $end
$var integer 32 I j [31:0] $end
$scope module c_un $end
$var wire 1 8 clk $end
$var wire 7 J instruction_opcode [6:0] $end
$var wire 1 G rst_n $end
$var parameter 5 K ADDI_EXEC $end
$var parameter 5 L ADDI_WB $end
$var parameter 5 M ALUWB $end
$var parameter 7 N AUIPCI $end
$var parameter 5 O AUIPC_EXEC $end
$var parameter 5 P AUIPC_WB $end
$var parameter 5 Q BRANCH $end
$var parameter 7 R BRANCHI $end
$var parameter 5 S DECODE $end
$var parameter 5 T EXECUTER $end
$var parameter 5 U FETCH $end
$var parameter 7 V ITYPE $end
$var parameter 7 W JALI $end
$var parameter 7 X JALRI $end
$var parameter 5 Y JALR_EXEC $end
$var parameter 5 Z JALR_WB $end
$var parameter 5 [ JAL_EXEC $end
$var parameter 5 \ JAL_WB $end
$var parameter 7 ] LUII $end
$var parameter 5 ^ LUI_EXEC $end
$var parameter 5 _ LUI_WB $end
$var parameter 7 ` LW $end
$var parameter 5 a MEMADR $end
$var parameter 5 b MEMREAD $end
$var parameter 5 c MEMWB $end
$var parameter 5 d MEMWRITE $end
$var parameter 7 e RTYPE $end
$var parameter 7 f SW $end
$var reg 2 g alu_src_a [1:0] $end
$var reg 2 h alu_src_b [1:0] $end
$var reg 2 i aluop [1:0] $end
$var reg 1 * ir_write $end
$var reg 1 ) is_immediate $end
$var reg 1 ( lorD $end
$var reg 1 ' memory_read $end
$var reg 1 & memory_to_reg $end
$var reg 1 % memory_write $end
$var reg 5 j next_state [4:0] $end
$var reg 1 $ pc_source $end
$var reg 1 # pc_write $end
$var reg 1 " pc_write_cond $end
$var reg 1 ! reg_write $end
$var reg 5 k state [4:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100011 f
b110011 e
b101 d
b100 c
b11 b
b10 a
b11 `
b1100 _
b1011 ^
b110111 ]
b10001 \
b1101 [
b10010 Z
b1110 Y
b1100111 X
b1101111 W
b10011 V
b0 U
b110 T
b1 S
b1100011 R
b1000 Q
b10000 P
b1111 O
b10111 N
b111 M
b1010 L
b1001 K
b100011 7
b110011 6
b11 5
b110111 4
b1100111 3
b1101111 2
b10011 1
b1110011 0
b1100011 /
b10111 .
$end
#0
$dumpvars
b0 k
b1 j
b0 i
b1 h
b0 g
b10111 J
b100 I
bx H
0G
b10111 F
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
bx ;
bx :
bx 9
08
b0 -
b1 ,
b0 +
1*
0)
0(
1'
0&
0%
0$
1#
0"
0!
$end
#1000
18
#2000
08
#3000
18
#4000
08
b1 :
b0 9
b0 ;
0@
0>
0D
0A
0=
1?
0E
0B
1<
1C
b0 H
1G
#5000
b10 -
b10 g
b10 ,
b10 h
0'
0*
0#
b1111 j
b1 k
18
#6000
08
b10 :
b10 9
0?
0<
0C
b1 H
#7000
b10 ,
b10 h
b10 -
b10 g
b10000 j
b1111 k
18
#8000
08
b10 H
#9000
1!
b0 ,
b0 h
b0 -
b0 g
b0 j
b10000 k
18
#10000
08
b0 :
b0 9
1E
b11 H
#11000
b1 ,
b1 h
1#
1*
1'
0!
b1 j
b0 k
18
#12000
08
b100 H
